---

id: experiment1
title: Standard Search vs. Stemming
sidebar_label: Stemming

---
import useBaseUrl from '@docusaurus/useBaseUrl'

For our first experiment we connected a Google Colab Notebook to our Elasticsearch instance and started comparing different build-in search metrics of Elasticsearch.

Therefore, we parsed [these 8 free available corpora](http://ir.dcs.gla.ac.uk/resources/test_collections/) hosted by the University of Glasgow and feed them to the Elasticsearch [Ranking API](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html). With [our parsing guide](https://pragmalingu.de/docs/guides/how-to-parse) you can try this yourself or you can look at our [Data Set Notebooks.]()

<<<<<<< HEAD:docs/experiments/experiment1.mdx
We compared the following Elasticsearch build-in operators:
=======
We tried comparing the following operators:
>>>>>>> eeee56006a9848af4730d689be1a281e46771023:docs/experiments/experiment1.md
* [Match query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html) 
* [Simple query string](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html)
* [Standard english stemmer](https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stemmer-tokenfilter.html)


## Match operator

<<<<<<< HEAD:docs/experiments/experiment1.mdx
The [match query operator](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html) is the standard search operator in Elasticsearch. It starts a full-text search in the given fields of the documents and comes with a standard tokenization and standard analyzer.
=======
The [match query operator](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html) is the standard search operator in Elasticsearch. A full-text search in the given fields of the documents comes with standard tokenization and an analyzer.
>>>>>>> eeee56006a9848af4730d689be1a281e46771023:docs/experiments/experiment1.md

The following is an example of a request that searches with match query. It operates on the query string in the 'text' field of the medline corpus:

```
"request": {
                "query": {
                    "match": {
                        "text": "palliation (temporary improvement) of cancer patients by using drugs, x-ray, surgery."
                    }
                }
            }
        },
```

## Simple query string operator

The [simple query string](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html) operator uses a parser with a limited fault-tolerant syntax to search for the given query string in the given fields. It splits and analyzes the query terms separately for the search before returning the relevant documents. It ignores invalid parts of the query string. 

Here is an example request with the simple query string operator searching for the query in the 'text' and 'title' fields of the medline corpus documents:

```
"request": {
                "query": {
                    "simple_query_string": {
                        "fields": [
                            "title",
                            "text"
                        ],
                        "query": "palliation (temporary improvement) of cancer patients by using drugs, x-ray, surgery."
                    }
                }
            }
        },
```

## Stemming

<<<<<<< HEAD:docs/experiments/experiment1.mdx
Elasticsearch provides two build-in stemming methods. 
([Click here to read more about stemming in general](https://pragmalingu.de/docs/guides/basic-definitions#stemming)) 

First of the [stemmer token filter](https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stemmer-tokenfilter.html) which is  a algorithmic stemming method. It applies a series of rules to each word to stem them. 

The second stemming method is the [hunspell token filter](https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-hunspell-tokenfilter.html) which uses a dictionary to stem the words. 


The *stemmer token filter* provides different languages and since our corpora where all in english we used the english stemmer for our experiment.

=======
Elasticsearch provides two build-in stemming methods. First of, the dictionary stemming replaces unstemmed words with stemmed variants from a provided dictionary. The Elasticsearch build-in conterpart is called [hunspell token filter](https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-hunspell-tokenfilter.html). Second of, is the algorithmic stemming. It applies a series of rules to each word to reduce them, called [stemmer token filter](https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stemmer-tokenfilter.html) in Elasticsearch. 
([Click here to read more about stemming in general](https://pragmalingu.de/docs/guides/basic-definitions#stemming)) 

The *stemmer token filter* supports different languages and, since our corpora were all in english, we utilized the english stemmer for our experiment.
>>>>>>> eeee56006a9848af4730d689be1a281e46771023:docs/experiments/experiment1.md
We implemented the stemming analyzer:

```
stemming_analyser = {
    "filter" : {
        "eng_stemmer" : {
        "type" : "stemmer",
        "name" : "english"
        }
    },
    "analyzer" : {
        "default" : {
            "tokenizer" : "standard",
            "filter" : ["lowercase", "eng_stemmer"]
        }
    }
}
```

And incorporated it into the settings for indexing the documents of each corpus:

```
settings = {
    "settings": {
        "number_of_shards": 1,
        "number_of_replicas": 0,
        "analysis": stemming_analyser
    }
}
```

## Results

For our result we run those three methods on our corpora. We messured Recall, Precision and F1-Score.
([Read more about Recall, Precision and F-Score](https://pragmalingu.de/docs/guides/basic-definitions))

**Recall**
<img alt="Recall" src={useBaseUrl('img/Recall.png')} />

| corpus                    |   cranfield |   CISI |   ADI |   medline |   CACM |   LISA |   Time |   NPL |
|---------------------------|-------------|--------|-------|-----------|--------|--------|--------|-------|
| match query               |       0.141 |  0.112 | 0.295 |     0.032 |  0.035 |  0.313 |  0.772 | 0.233 |
| simple query string query |       0.143 |  0.101 | 0.254 |     0.032 |  0.048 |  0.406 |  0.772 | 0.233 |
| stemming                  |       0.145 |  0.122 | 0.297 |     0.032 |  0.044 |  0.383 |  0.78  | 0.285 |


**Precision**
<img alt="Precision" src={useBaseUrl('img/Precision.png')} />

| corpus                    |   cranfield |   CISI |   ADI |   medline |   CACM |   LISA |   Time |   NPL |
|---------------------------|-------------|--------|-------|-----------|--------|--------|--------|-------|
| match query               |       0.053 |  0.154 | 0.072 |     0.031 |  0.023 |  0.143 |  0.15  | 0.217 |
| simple query string query |       0.053 |  0.154 | 0.068 |     0.031 |  0.026 |  0.179 |  0.15  | 0.217 |
| stemming                  |       0.056 |  0.174 | 0.074 |     0.031 |  0.028 |  0.181 |  0.152 | 0.258 |


**F1-Score**
<img alt="F1-Score" src={useBaseUrl('img/F1-Score.png')} />

| corpus                    |   cranfield |   CISI |   ADI |   medline |   CACM |   LISA |   Time |   NPL |
|---------------------------|-------------|--------|-------|-----------|--------|--------|--------|-------|
| match query               |       0.077 |  0.129 | 0.116 |     0.032 |  0.028 |  0.196 |  0.251 | 0.225 |
| simple query string query |       0.077 |  0.122 | 0.107 |     0.032 |  0.034 |  0.248 |  0.251 | 0.225 |
| stemming                  |       0.081 |  0.143 | 0.118 |     0.032 |  0.034 |  0.246 |  0.255 | 0.271 |



<<<<<<< HEAD:docs/experiments/experiment1.mdx
As you can see, the stemmer doesn't have a significant impact on all the results. The next step would be to try other operators as tokenization and lemmatization.
=======
Surprisingly, the contrast in using a stemmer isn't that significant but it surely does make more difference than switching from match query to simple query.
>>>>>>> eeee56006a9848af4730d689be1a281e46771023:docs/experiments/experiment1.md
