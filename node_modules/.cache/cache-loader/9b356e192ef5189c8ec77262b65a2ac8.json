{"remainingRequest":"/Users/miriam/pragmalingu.github.io/node_modules/babel-loader/lib/index.js??ref--8-1!/Users/miriam/pragmalingu.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/Users/miriam/pragmalingu.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/Users/miriam/pragmalingu.github.io/docs/benchmarks/data-comparisson.md","dependencies":[{"path":"/Users/miriam/pragmalingu.github.io/docs/benchmarks/data-comparisson.md","mtime":1596447562005},{"path":"/Users/miriam/pragmalingu.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-benchmarks-data-comparisson-md-fef.json","mtime":1596450972167},{"path":"/Users/miriam/pragmalingu.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/miriam/pragmalingu.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/miriam/pragmalingu.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":499162500000},{"path":"/Users/miriam/pragmalingu.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}