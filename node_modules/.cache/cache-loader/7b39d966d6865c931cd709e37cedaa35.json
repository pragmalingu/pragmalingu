{"remainingRequest":"/Users/miriam/pragmalingu.github.io/pragmalingu.github.io/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/miriam/pragmalingu.github.io/pragmalingu.github.io/node_modules/@docusaurus/theme-classic/src/theme/Navbar/index.js","dependencies":[{"path":"/Users/miriam/pragmalingu.github.io/pragmalingu.github.io/node_modules/@docusaurus/theme-classic/src/theme/Navbar/index.js","mtime":499162500000},{"path":"/Users/miriam/pragmalingu.github.io/pragmalingu.github.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/miriam/pragmalingu.github.io/pragmalingu.github.io/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}