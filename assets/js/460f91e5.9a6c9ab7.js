(self.webpackChunkpragmalingu_github_io=self.webpackChunkpragmalingu_github_io||[]).push([[242],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=d(n),p=a,h=u["".concat(s,".").concat(p)]||u[p]||c[p]||l;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3919:function(e,t,n){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}n.d(t,{b:function(){return r},Z:function(){return a}})},4996:function(e,t,n){"use strict";n.d(t,{C:function(){return l},Z:function(){return i}});var r=n(2263),a=n(3919);function l(){var e=(0,r.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,l=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,r){var l=void 0===r?{}:r,i=l.forcePrependBaseUrl,o=void 0!==i&&i,s=l.absolute,d=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,a.b)(n))return n;if(o)return t+n;var m=n.startsWith(t)?n:t+n.replace(/^\//,"");return d?e+m:m}(l,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,l().withBaseUrl)(e,t)}},5839:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return m},default:function(){return u}});var r=n(2122),a=n(9756),l=(n(7294),n(3905)),i=n(4996),o={id:"experiment2",title:"Sentence Embeddings Experiment",sidebar_label:"Sentence Embeddings",custom_edit_url:null,description:"Experiment with BERT Sentence Embeddings in Elasticsearch",keywords:["BERT","sentence embeddings","embeddings","Elasticsearch"]},s=void 0,d={unversionedId:"experiments/experiment2",id:"experiments/experiment2",isDocsHomePage:!1,title:"Sentence Embeddings Experiment",description:"Experiment with BERT Sentence Embeddings in Elasticsearch",source:"@site/docs/experiments/experiment2.mdx",sourceDirName:"experiments",slug:"/experiments/experiment2",permalink:"/docs/experiments/experiment2",editUrl:null,version:"current",frontMatter:{id:"experiment2",title:"Sentence Embeddings Experiment",sidebar_label:"Sentence Embeddings",custom_edit_url:null,description:"Experiment with BERT Sentence Embeddings in Elasticsearch",keywords:["BERT","sentence embeddings","embeddings","Elasticsearch"]},sidebar:"experiments",previous:{title:"Stemming",permalink:"/docs/experiments/experiment1"}},m=[{value:"1. What Is BERT?",id:"1-what-is-bert",children:[]},{value:"2. Preparing The BERT Model",id:"2-preparing-the-bert-model",children:[]},{value:"3. Experimenting With Sentence Embeddings From BERT",id:"3-experimenting-with-sentence-embeddings-from-bert",children:[]},{value:"4. Results",id:"4-results",children:[]}],c={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,'For our second experiment we connected a Colab Notebook to an Elasticsearch instance and compared the standard Elasticsearch operator with our first embedding approach. To do this,  we first transformed the documents into vector representations by using a BERT base model (uncased) for Sentence Embeddings ("bert-base-nli-mean-tokens" from the ',(0,l.kt)("a",{parentName:"p",href:"https://github.com/UKPLab/sentence-transformers"},"sentence transformer repository"),") and indexed them. Next, we searched in the transformed documents with a vector representation of the query.\nSince the ",(0,l.kt)("a",{parentName:"p",href:"https://www.sbert.net/docs/pretrained_models.html#semantic-textual-similarity"},'"bert-base-nli-mean-tokens"')," model is designed to work on sentences, we searched both the document titles, as well as the entire text, and compared the results."),(0,l.kt)("p",null,"We have already described how the standard Elasticsearch analyzer works and how we configured it in ",(0,l.kt)("a",{parentName:"p",href:"/docs/experiments/experiment1"},"our first experiment"),"."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Need a short summary of the Multi-Match Query?"),(0,l.kt)("p",null,"The standard Elasticsearch method - ",(0,l.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html"},"Multi-Match Query"),' - is a full-text search which by default uses the highest matching score from the given fields to rank the documents; in our case "text" and "title". If no fields are provided, the Multi-Match Query uses all existing fields as a default. To gather our data, we only looked at the first 20 retrieved documents for any given search.')),(0,l.kt)("h3",{id:"1-what-is-bert"},"1. What Is BERT?"),(0,l.kt)("p",null,"BERT is short for Bi-directional Encoder Representation from Transformer and is an approach which uses large, pre-trained, neural networks with some exceptional solutions to get vector representations (embeddings) from texts. Using these embeddings we can use similarity metrics - such as cosine similarity - to compare the meaning of the texts."),(0,l.kt)("p",null,"(By the way, these networks are frequently used as a backbone or part of models to solve some NLP tasks like Question Answering, Ranking, Named Entity Recognition, etc.)"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1810.04805"},'"I\'m brave enough to read the paper on BERT"')),(0,l.kt)("p",null,"We also try to explain BERT in our ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/embeddings-transformers"},"Guide About Transformers and Embeddings.")),(0,l.kt)("h3",{id:"2-preparing-the-bert-model"},"2. Preparing The BERT Model"),(0,l.kt)("p",null,"For our experiment, we decided on a ",(0,l.kt)("a",{parentName:"p",href:"https://www.sbert.net/index.html"},"Sentence Transformer ")," BERT model which was optimized to work on ",(0,l.kt)("a",{parentName:"p",href:"https://www.sbert.net/docs/pretrained_models.html#semantic-textual-similarity"},"Semantic Textual Similarity"),'; "bert-base-nli-mean-tokens".  The selected pre-trained BERT model was then used to map the desired search fields from the documents and the search query into embeddings. To get comparable values we ranked the search results based on the cosine similarity between the sentence embeddings and query embeddings.'),(0,l.kt)("details",null,(0,l.kt)("summary",null,"What is cosine similarity?"),(0,l.kt)("p",null,"The cosine similarity is used to measure the difference between two vectors irrespective of their size. In NLP they often represent words, sentences, or even whole documents. To get the cosine similarity the angle between two vectors - which are projected in a multi-dimensional space - is calculated. The smaller the angle, the higher the cosine similarity. Therefore, if the cosine similarity is 1, the vectors are identical. Read more details on our ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/basic-definitions"},"Basic Definition")," page.")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Where can you find a fitting BERT model for your project?"),(0,l.kt)("p",null,"There are a lot of different pretrained BERT models. The ",(0,l.kt)("a",{parentName:"p",href:"https://www.sbert.net/index.html"},"Sentence Transformers Documentation"),"  can help you a lot to find a fitting model, even more models can be found on the ",(0,l.kt)("a",{parentName:"p",href:"https://huggingface.co/"},"Hugging Face")," website.")),(0,l.kt)("br",null),(0,l.kt)("p",null,"We then tried to improve the results by re-ranking the top 100 results of a normal multi-match query using the cosine similarity."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Initialize A Pre-trained BERT Model")),(0,l.kt)("p",null,"Before we could start experimenting, we had to choose a pre-trained model from many available ones out of the ",(0,l.kt)("a",{parentName:"p",href:"https://www.sbert.net/index.html"},"Sentence Transformers library"),"(TU Darmstadt), download, and initialize it. Our first choice was the BERT model ",(0,l.kt)("a",{parentName:"p",href:"https://www.sbert.net/docs/pretrained_models.html#semantic-textual-similarity"},'"bert-base-nli-mean-tokens"')," for Semantic Textual Similarity, this model was developed to generate sentence embeddings.\n(For more information on this model you can read the paper ",(0,l.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1908.10084"},"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks"),")"),(0,l.kt)("p",null,"To initialize the model we ran the following code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"pip install -U sentence-transformers\n\nfrom sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer('bert-base-nli-mean-tokens')\n\n")),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=8rWL3C3BLMAR&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run BERT model in Colab")),(0,l.kt)("h3",{id:"3-experimenting-with-sentence-embeddings-from-bert"},"3. Experimenting With Sentence Embeddings From BERT"),(0,l.kt)("p",null,"After initializing the BERT model, we converted the documents and the search queries into sentence embeddings. Then - similarly to our last experiment - we calculated comparable values using the ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/ranking-api"},"Ranking Evaluation API"),".\nWe decided to compare three different approaches:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("a",{parentName:"li",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html#query-dsl-multi-match-query"},"Multi-Match Query")," with a standard analyzer"),(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("a",{parentName:"li",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-script-score-query.html"},"Script Score Query")," to get the cosine similarity for the BERT embeddings "),(0,l.kt)("li",{parentName:"ul"},"A more complex ",(0,l.kt)("a",{parentName:"li",href:"https://www.elastic.co/guide/en/elasticsearch/reference/6.8/search-request-rescore.html"},"Rescore Score Query"),' - to combine the first two approaches - for re-ranking with the cosine similarity of the top 100 documents that are retrieved with a Multi-Match Query\nWe run each of those approaches separately on the "title" and the "text" field. For the re-ranking we also tried a combination of both fields.  ')),(0,l.kt)("h4",{id:"31-preparing-the-documents"},"3.1. Preparing The Documents"),(0,l.kt)("p",null,"Now that the model has been integrated into our Notebook, we could start transforming our texts with BERT. To be able to compare the documents and the search query using cosine similarity, we first had to convert the desired search fields into embeddings and feed them into Elasticsearch."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Title Embeddings"),(0,l.kt)("br",null),"\nFor our first approach, we tried to calculate the similarity between the search queries and the titles of the documents. To do this, we set ",(0,l.kt)("inlineCode",{parentName:"p"},"title_vector")," as a container for the computed BERT embedding in addition to the field ",(0,l.kt)("inlineCode",{parentName:"p"},"title"),", which should be the container for the text of the title:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'# Settings for BERT title search\nsettings_title = {\n  "mappings": {\n      "properties": {\n          "title": {\n              "type": "text"\n              },\n          "title_vector": {\n           "type": "dense_vector",\n           "dims": 768\n            }\n    }\n  }\n}\n')),(0,l.kt)("p",null,"While indexing, the code iterates over the preprocessed corpus and encodes the title for each document using the ",(0,l.kt)("a",{parentName:"p",href:"https://www.sbert.net/docs/pretrained_models.html#semantic-textual-similarity"},'"bert-base-nli-mean-tokens"')," model:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for ID, doc_data in adi_txt_data.items():\n# index for BERT title search\n    es.index(\n      index=adi_index_title, \n      id=ID, \n      body={\n          'title_vector': model.encode(adi_txt_data[ID]['title']),\n          'title': adi_txt_data[ID]['title'],\n          }\n    )\n")),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=ZaxpCqSDShgg&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Colab")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note"),": Not every corpus has titles, that is why we excluded the ",(0,l.kt)("inlineCode",{parentName:"p"},"Medline"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"NPL")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Time")," corpus for the title search."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"BERT on title field"),(0,l.kt)("th",{parentName:"tr",align:null},"ADI"),(0,l.kt)("th",{parentName:"tr",align:null},"CACM"),(0,l.kt)("th",{parentName:"tr",align:null},"CISI"),(0,l.kt)("th",{parentName:"tr",align:null},"Cranfield"),(0,l.kt)("th",{parentName:"tr",align:null},"LISA"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Recall"),(0,l.kt)("td",{parentName:"tr",align:null},"0.459"),(0,l.kt)("td",{parentName:"tr",align:null},"0.109"),(0,l.kt)("td",{parentName:"tr",align:null},"0.039"),(0,l.kt)("td",{parentName:"tr",align:null},"0.24"),(0,l.kt)("td",{parentName:"tr",align:null},"0.139")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Precision"),(0,l.kt)("td",{parentName:"tr",align:null},"0.459"),(0,l.kt)("td",{parentName:"tr",align:null},"0.07"),(0,l.kt)("td",{parentName:"tr",align:null},"0.089"),(0,l.kt)("td",{parentName:"tr",align:null},"0.082"),(0,l.kt)("td",{parentName:"tr",align:null},"0.056")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"F-1-Score"),(0,l.kt)("td",{parentName:"tr",align:null},"0.459"),(0,l.kt)("td",{parentName:"tr",align:null},"0.085"),(0,l.kt)("td",{parentName:"tr",align:null},"0.054"),(0,l.kt)("td",{parentName:"tr",align:null},"0.123"),(0,l.kt)("td",{parentName:"tr",align:null},"0.08")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Text Embeddings"),(0,l.kt)("br",null),"\nThe procedure for working with the whole text was a bit more complicated as we first had to split the text into sentences. Otherwise the embeddings would have been far too long or  even cut off. In addition, we suspect that individual sentences are more likely to be similar to the title than the whole text. Therefore, we created a new category inside the corpus dictionaries to store the split sentences for easy access:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# transform text to sentences for BERT text search\n\nimport nltk\nfrom nltk import tokenize\nfrom nltk.tokenize import sent_tokenize\nnltk.download('punkt')\n\ndef text_to_sentences(string):\n  sentences = tokenize.sent_tokenize(string)\n  return sentences\n\nfor ID, doc in adi_txt_data.items():\n  text = adi_txt_data[ID]['text']\n  adi_txt_data[ID]['sentences'] = text_to_sentences(text)\n")),(0,l.kt)("p",null,"Since a text is represented by more than one sentence, we needed to create a container to store all of the sentence embeddings. Therefore, we initialized ",(0,l.kt)("inlineCode",{parentName:"p"},"text_vector")," as seen below, which is a nested container. The whole, unsplit text is stored in the container ",(0,l.kt)("inlineCode",{parentName:"p"},"text"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'# Settings for BERT text search\nsettings_text = {\n  "mappings": {\n    "properties": {\n      "text_vector": {\n        "type": "nested",\n        "properties": {\n          "vector": {\n            "type": "dense_vector",\n            "dims": 768 \n          }\n        }\n      },\n     "text": {\n        "type": "keyword"\n    },\n    }\n  }\n}\n')),(0,l.kt)("p",null,"Now we can index the text as a whole and as a list of embeddings:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for ID, doc_data in adi_txt_data.items():\n# index for BERT text search\n     es.index(\n      index=adi_index_text, \n      id=ID, \n      body={\n          'text_vector': [{\"vector\": model.encode(text)} for text in adi_txt_data[ID]['sentences']],\n          'text': adi_txt_data[ID]['text']\n          }\n    )\n")),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=ZaxpCqSDShgg&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Colab")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note"),": Not every document has text, so for some corpora we needed to check that while indexing, e.g. the ",(0,l.kt)("inlineCode",{parentName:"p"},"CACM")," corpus."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"BERT on text field"),(0,l.kt)("th",{parentName:"tr",align:null},"ADI"),(0,l.kt)("th",{parentName:"tr",align:null},"CACM"),(0,l.kt)("th",{parentName:"tr",align:null},"CISI"),(0,l.kt)("th",{parentName:"tr",align:null},"Cranfield"),(0,l.kt)("th",{parentName:"tr",align:null},"LISA"),(0,l.kt)("th",{parentName:"tr",align:null},"Medline"),(0,l.kt)("th",{parentName:"tr",align:null},"NPL"),(0,l.kt)("th",{parentName:"tr",align:null},"Time"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Recall"),(0,l.kt)("td",{parentName:"tr",align:null},"0.528"),(0,l.kt)("td",{parentName:"tr",align:null},"0.114"),(0,l.kt)("td",{parentName:"tr",align:null},"0.067"),(0,l.kt)("td",{parentName:"tr",align:null},"0.242"),(0,l.kt)("td",{parentName:"tr",align:null},"0.129"),(0,l.kt)("td",{parentName:"tr",align:null},"0.171"),(0,l.kt)("td",{parentName:"tr",align:null},"0.099"),(0,l.kt)("td",{parentName:"tr",align:null},"0.58")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Precision"),(0,l.kt)("td",{parentName:"tr",align:null},"0.12"),(0,l.kt)("td",{parentName:"tr",align:null},"0.062"),(0,l.kt)("td",{parentName:"tr",align:null},"0.096"),(0,l.kt)("td",{parentName:"tr",align:null},"0.084"),(0,l.kt)("td",{parentName:"tr",align:null},"0.043"),(0,l.kt)("td",{parentName:"tr",align:null},"0.21"),(0,l.kt)("td",{parentName:"tr",align:null},"0.089"),(0,l.kt)("td",{parentName:"tr",align:null},"0.117")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"F-1-Score"),(0,l.kt)("td",{parentName:"tr",align:null},"0.196"),(0,l.kt)("td",{parentName:"tr",align:null},"0.081"),(0,l.kt)("td",{parentName:"tr",align:null},"0.079"),(0,l.kt)("td",{parentName:"tr",align:null},"0.124"),(0,l.kt)("td",{parentName:"tr",align:null},"0.064"),(0,l.kt)("td",{parentName:"tr",align:null},"0.189"),(0,l.kt)("td",{parentName:"tr",align:null},"0.094"),(0,l.kt)("td",{parentName:"tr",align:null},"0.195")))),(0,l.kt)("h4",{id:"32-search-with-cosine-similarity"},"3.2 Search With Cosine Similarity"),(0,l.kt)("p",null,"Once we had prepared all the documents, the only thing left was to compute the search queries before we could pass them to the Ranking Evaluation API. For the search on the title fields a ",(0,l.kt)("inlineCode",{parentName:"p"},"script_score")," request for each query was enough to get results. Our ",(0,l.kt)("inlineCode",{parentName:"p"},"script_score")," calculates the cosine similarity between each document title and the search query before returning the top 20 results:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'"query" : {\n  "script_score": {\n    "query": {"match_all": {}},\n    "script": {\n      "source": "cosineSimilarity(params.query_vector, doc[\'title_vector\']) + 1.0",\n      "params": {"query_vector": list(model.encode(query_txt[\'question\']).astype(float))}\n    }\n  }\n  }\n    }\n')),(0,l.kt)("p",null,"For the search on the ",(0,l.kt)("inlineCode",{parentName:"p"},"text_vector")," embeddings it was a bit more complicated. Since the embeddings were saved as a list, we had to create a nested query which calculates the cosine similarity between each sentence and the query. The best cosine similarity value becomes the value for the entire document:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'"query": {\n            "nested": {\n                "path": "text_vector",\n                "score_mode": "max", \n                "query": {\n                    "function_score": {\n                        "script_score": {\n                            "script": {\n                                "source": "1.0 + cosineSimilarity(params.query_vector, \'text_vector.vector\')",\n                                "params": {"query_vector": list(model.encode(query_txt[\'question\']).astype(float))}\n                                }\n                                }\n                                }\n                          }\n                       }\n                  }\n                  }\n')),(0,l.kt)("h4",{id:"33-search-with-re-ranking"},"3.3. Search with Re-ranking"),(0,l.kt)("p",null,"Since the text embeddings doesn't seem to be working as good as the standard Elasticsearch analyzer, we decided to try a re-ranking on the documents. Re-ranking is the act of ranking something differently. In Elasticsearch the function to achieve this is called ",(0,l.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/6.8/search-request-rescore.html"},"Rescoring"),". "),(0,l.kt)("p",null,'Therefore, we run a normal multi-match query on the given field ("title" or "text") and rescore the top 100 results from that query with our cosine similarity BERT search.'),(0,l.kt)("p",null,'In this example we use our search on the "text"-field and the cosine similarity search on the sentence embeddings:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'{\n  "query": {\n    "multi_match" : {\n                  "query" : query_txt[\'question\'],\n                  "fields" : [\'text\']\n            }\n  },\n  "rescore" : {\n      "window_size" : 100,\n      "query": {\n          "rescore_query" : {\n            "nested": {\n                "path": "text_vector",\n                "score_mode": "max", \n                "query": {\n                    "function_score": {\n                        "script_score": {\n                            "script": {\n                                "source": "1.0 + cosineSimilarity(params.query_vector, \'text_vector.vector\')",\n                                "params": {"query_vector": list(model.encode(query_txt[\'question\']).astype(float))}\n                                }\n                                }\n                                }\n                          }\n                       }\n            }\n                  }\n}\n    }\n')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Re-Ranking on title field"),(0,l.kt)("th",{parentName:"tr",align:null},"ADI"),(0,l.kt)("th",{parentName:"tr",align:null},"CACM"),(0,l.kt)("th",{parentName:"tr",align:null},"CISI"),(0,l.kt)("th",{parentName:"tr",align:null},"Cranfield"),(0,l.kt)("th",{parentName:"tr",align:null},"LISA"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Recall"),(0,l.kt)("td",{parentName:"tr",align:null},"0.472"),(0,l.kt)("td",{parentName:"tr",align:null},"0.185"),(0,l.kt)("td",{parentName:"tr",align:null},"0.059"),(0,l.kt)("td",{parentName:"tr",align:null},"0.405"),(0,l.kt)("td",{parentName:"tr",align:null},"0.306")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Precision"),(0,l.kt)("td",{parentName:"tr",align:null},"0.111"),(0,l.kt)("td",{parentName:"tr",align:null},"0.11"),(0,l.kt)("td",{parentName:"tr",align:null},"0.094"),(0,l.kt)("td",{parentName:"tr",align:null},"0.147"),(0,l.kt)("td",{parentName:"tr",align:null},"0.141")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"F1-Score"),(0,l.kt)("td",{parentName:"tr",align:null},"0.18"),(0,l.kt)("td",{parentName:"tr",align:null},"0.138"),(0,l.kt)("td",{parentName:"tr",align:null},"0.072"),(0,l.kt)("td",{parentName:"tr",align:null},"0.216"),(0,l.kt)("td",{parentName:"tr",align:null},"0.193")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Re-ranking on text field"),(0,l.kt)("th",{parentName:"tr",align:null},"ADI"),(0,l.kt)("th",{parentName:"tr",align:null},"CACM"),(0,l.kt)("th",{parentName:"tr",align:null},"CISI"),(0,l.kt)("th",{parentName:"tr",align:null},"Cranfield"),(0,l.kt)("th",{parentName:"tr",align:null},"LISA"),(0,l.kt)("th",{parentName:"tr",align:null},"Medline"),(0,l.kt)("th",{parentName:"tr",align:null},"NPL"),(0,l.kt)("th",{parentName:"tr",align:null},"Time"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Recall"),(0,l.kt)("td",{parentName:"tr",align:null},"0.537"),(0,l.kt)("td",{parentName:"tr",align:null},"0.272"),(0,l.kt)("td",{parentName:"tr",align:null},"0.112"),(0,l.kt)("td",{parentName:"tr",align:null},"0.515"),(0,l.kt)("td",{parentName:"tr",align:null},"0.355"),(0,l.kt)("td",{parentName:"tr",align:null},"0.335"),(0,l.kt)("td",{parentName:"tr",align:null},"0.233"),(0,l.kt)("td",{parentName:"tr",align:null},"0.774")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Precision"),(0,l.kt)("td",{parentName:"tr",align:null},"0.113"),(0,l.kt)("td",{parentName:"tr",align:null},"0.13"),(0,l.kt)("td",{parentName:"tr",align:null},"0.155"),(0,l.kt)("td",{parentName:"tr",align:null},"0.183"),(0,l.kt)("td",{parentName:"tr",align:null},"0.143"),(0,l.kt)("td",{parentName:"tr",align:null},"0.38"),(0,l.kt)("td",{parentName:"tr",align:null},"0.218"),(0,l.kt)("td",{parentName:"tr",align:null},"0.151")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"F1-Score"),(0,l.kt)("td",{parentName:"tr",align:null},"0.187"),(0,l.kt)("td",{parentName:"tr",align:null},"0.176"),(0,l.kt)("td",{parentName:"tr",align:null},"0.13"),(0,l.kt)("td",{parentName:"tr",align:null},"0.27"),(0,l.kt)("td",{parentName:"tr",align:null},"0.204"),(0,l.kt)("td",{parentName:"tr",align:null},"0.356"),(0,l.kt)("td",{parentName:"tr",align:null},"0.225"),(0,l.kt)("td",{parentName:"tr",align:null},"0.253")))),(0,l.kt)("h4",{id:"34-combining-those-approaches"},"3.4. Combining those Approaches"),(0,l.kt)("p",null,'To get even better results we then tried to combine all the previous approaches into a more complex Elasticsearch query.\nTherefore, we searched on both - "title" and "text"-field - and reranked afterwards using the cosine similarity of the title embedding and the sentence embeddings of the text. Since it\'s more likely to have a meaningful title we boosted the value of the cosine similarity for the title embeddings. The boosting can be adjusted by changing the values of the variables "query_weight" and "rescore_query_weight" using a float().'),(0,l.kt)("p",null,"This is the code we used:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'{\n  "query": {\n    "multi_match" : {\n                  "query" : query_txt[\'question\'],\n                  "fields" : [\'text\',\'title\']\n            }\n  },\n  "rescore" :  [\n                {\n      "window_size" : 100,\n      "query" : {\n         "rescore_query" : {\n              "script_score": {\n    "query": {"match_all": {}},\n    "script": {\n      "source": "cosineSimilarity(params.query_vector, doc[\'title_vector\']) + 1.0",\n      "params": {"query_vector": list(model.encode(query_txt[\'question\']).astype(float))}\n    }\n            }\n      },\n         "query_weight" : query_weight,\n         "rescore_query_weight" : rescore_query_weight\n   }\n},\n                {\n      "window_size" : 100,\n      "query": {\n          "rescore_query" : {\n            "nested": {\n                "path": "text_vector",\n                "score_mode": "max", \n                "query": {\n                    "function_score": {\n                        "script_score": {\n                            "script": {\n                                "source": "1.0 + cosineSimilarity(params.query_vector, \'text_vector.vector\')",\n                                "params": {"query_vector": list(model.encode(query_txt[\'question\']).astype(float))}\n                                }\n                                }\n                                }\n                          }\n                       }\n            }\n                  }\n}  \n  ]}\n')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Complex re-ranking query"),(0,l.kt)("th",{parentName:"tr",align:null},"ADI"),(0,l.kt)("th",{parentName:"tr",align:null},"CACM"),(0,l.kt)("th",{parentName:"tr",align:null},"CISI"),(0,l.kt)("th",{parentName:"tr",align:null},"Cranfield"),(0,l.kt)("th",{parentName:"tr",align:null},"LISA"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Recall"),(0,l.kt)("td",{parentName:"tr",align:null},"0.556"),(0,l.kt)("td",{parentName:"tr",align:null},"0.294"),(0,l.kt)("td",{parentName:"tr",align:null},"0.105"),(0,l.kt)("td",{parentName:"tr",align:null},"0.516"),(0,l.kt)("td",{parentName:"tr",align:null},"0.383")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Precision"),(0,l.kt)("td",{parentName:"tr",align:null},"0.126"),(0,l.kt)("td",{parentName:"tr",align:null},"0.145"),(0,l.kt)("td",{parentName:"tr",align:null},"0.159"),(0,l.kt)("td",{parentName:"tr",align:null},"0.184"),(0,l.kt)("td",{parentName:"tr",align:null},"0.167")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"F1-Score"),(0,l.kt)("td",{parentName:"tr",align:null},"0.205"),(0,l.kt)("td",{parentName:"tr",align:null},"0.194"),(0,l.kt)("td",{parentName:"tr",align:null},"0.127"),(0,l.kt)("td",{parentName:"tr",align:null},"0.271"),(0,l.kt)("td",{parentName:"tr",align:null},"0.233")))),(0,l.kt)("h3",{id:"4-results"},"4. Results"),(0,l.kt)("p",null,'In order to get suitable comparison values, we decided to carry out the standard analyzer in the same way as the BERT based search on the title or text field. In addition to that we tried out how effective re-ranking can be on the BERT based results and also built a more complex query for Elasticsearch to combine everything we evaluated before.\nTo compare our results properly we measured Recall, Precision and F1-Score for every method on every corpus. We divided the results into the search on "title"-field,  on "text"-field and with our more complex query, to avoid confusion.'),(0,l.kt)("details",null,(0,l.kt)("summary",null,'What is "Recall"?'),"Recall measures the probability that relevant documents are retrieved. Therefore, the number of all retrieved relevant documents is divided by the number of all documents that are labeled as relevant. For example, if we were to search 10 documents, 8 of which are relevant and 4 of these are retrieved, then the Recall measure would be 4/8 = 0.5. To measure the Recall it is necessary to have the relevant documents labeled. Recall only looks at the documents that could be retrieved and does not take into account any irrelevant documents which may have been retrieved."),(0,l.kt)("details",null,(0,l.kt)("summary",null,'What is "Precision"?'),"Precision measures the probability that retrieved documents are relevant to the search query. Therefore, the number of all retrieved relevant documents is divided by the number of all retrieved documents.  For example, if we retrieve 10 search results and only 5 are relevant for our search, then the Precision measure would be: 5/10 = 0.5. To measure the Precision it is necessary to have the relevant documents labeled as such. Precision only looks at the documents that are retrieved and does not account for relevant documents which were not retrieved."),(0,l.kt)("details",null,(0,l.kt)("summary",null,'What is "F1-Score"?'),"The F1-Score measures a harmonic mean between Precision and Recall. Therefore, we multiply Precision and Recall by two and divide it by the sum of Precision and Recall: ",(0,l.kt)("br",null),"`F1-Score=(2*Precision*Recall)/(Precision+Recall)` This is the simplest way to balance both Precision and Recall, there are also other common options to weight them differently."),(0,l.kt)("h4",{id:"41-search-on-the-title-field"},"4.1. Search on the title field"),(0,l.kt)("p",null,'These are the results for the search on the "title"-field  which compare the standard analyzer, a BERT based search and a re-ranking on the top 100 results using BERT. Since the data sets ',(0,l.kt)("inlineCode",{parentName:"p"},"Medline"),",",(0,l.kt)("inlineCode",{parentName:"p"}," NPL")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Time")," do not have any titles, the title search was left out for these corpora as with the last experiment."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Recall")),(0,l.kt)("img",{alt:"Recall on title field",src:(0,i.Z)("img/EXP2_Recall_title.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=crBSdbZMPAH9&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Precision")),(0,l.kt)("img",{alt:"Precision on title field",src:(0,i.Z)("img/EXP2_Precision_title.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=Bp4g4N7TUpXB&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"F1-Score")),(0,l.kt)("img",{alt:"F1-Score on title field",src:(0,i.Z)("img/EXP2_Fscore_title.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=mYfPAzYTVwRQ&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"42-search-on-the-text-field"},"4.2. Search on the text field"),(0,l.kt)("p",null,'These are the results for the search on the "text"-field which compare the standard analyzer, a BERT search and a re-ranking on the top 100 results using BERT.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Recall")),(0,l.kt)("img",{alt:"Recall on text field",src:(0,i.Z)("img/EXP2_Recall_text.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=BXibzPzmf_KK&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Precision")),(0,l.kt)("img",{alt:"Precision on text field",src:(0,i.Z)("img/EXP2_Precision_text.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=tRF25Yq3G0QU&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"F1-Score")),(0,l.kt)("img",{alt:"F1-Score on text field",src:(0,i.Z)("img/EXP2_Fscore_text.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=QA8CpbbRQtIH&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("h4",{id:"43-search-with-a-complex-re-ranking-query"},"4.3. Search with a complex re-ranking query"),(0,l.kt)("p",null,'These are the results for the search with a more complex query which searches on both fields "title" and "text" and reranks these results afterwards by computing the cosine similarity for the BERT vectors on title and text. The title field is boosted while reranking. To see the difference these results are compared with the standard analyzer on the "title"- and "text"-field, as with the BERT based search on "title" and "text".'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Recall")),(0,l.kt)("img",{alt:"Recall on complex re-ranking query",src:(0,i.Z)("img/EXP2_Recall_complex.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=tJBsXlxhmgPV&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Precision")),(0,l.kt)("img",{alt:"Precision on complex re-ranking query",src:(0,i.Z)("img/EXP2_Precision_complex.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=N41wwBZA1Z3v&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"F1-Score")),(0,l.kt)("img",{alt:"F1-Score  on complex re-ranking query",src:(0,i.Z)("img/EXP2_Fscore_complex.svg"),className:"content"}),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=hO3oqgZE2ys2&line=1&uniqifier=1"},(0,l.kt)("button",{className:"buttons"},"Run this in Google Colab")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,"For a more detailed analysis check out our ",(0,l.kt)("a",{parentName:"p",href:"/docs/comparisons/embeddings"},"Embedding Comparison"),"."),(0,l.kt)("a",{className:"buttons",href:"https://colab.research.google.com/github/pragmalingu/experiments/blob/master/02_Embeddings/Experiment/Second_Experiment_BERT_Embeddings.ipynb#scrollTo=n93d8RqwhKXs"},(0,l.kt)("button",{className:"buttons"},"Try it yourself!")),(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Acknowledgements:"),(0,l.kt)("br",null),"\nThanks to Pavel Prokopev for the pre-work on the BERT Embeddings and Kenny Hall for proofreading this article."),(0,l.kt)("div",{className:"col text--right"},(0,l.kt)("em",null,(0,l.kt)("small",null,"Written by ",(0,l.kt)("strong",null,"Miriam Rupprecht"),",  December 2020"))))}u.isMDXComponent=!0}}]);